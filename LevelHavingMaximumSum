#include<bits/stdc++.h>
#include<stdlib.h>
#include<cstdio>
#include<utility>
#include<vector>
#include<iostream>
#include<string.h>
#include<map>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define LL long long
#include<math.h>
//Print Level having maximum sum....

//NAVIN
//Here we go...
struct BT{
  int data;
  BT*lf;
  BT*rg;
  
};
struct BT*Newnode(int x)
{
    BT*temp=new BT();
    temp->data=x;
    temp->lf=NULL;
    temp->rg=NULL;
    return temp;
}
void LevelhavMaxSum(BT*root)
{
    if(root==NULL)
        return;
     int level=0,reslevel=0;
     int currentsum=0,sum=0;   
    queue<BT*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        BT *temp=q.front();
        q.pop();
        if(temp==NULL){
          if(currentsum>sum){
            sum=currentsum;
            reslevel=level;
          }
          currentsum=0;
          if(!q.empty()){
            q.push(NULL);
            level++;
          }
    }
    else{
        currentsum+=temp->data;
        if(temp->lf!=NULL)
            q.push(temp->lf);
        if(temp->rg!=NULL)
              q.push(temp->rg);
        }
    }
    cout<<reslevel<<" ";
}

 void PrintTree(BT*root)
 {
     if(root==NULL)
        return;
      cout<<root->data<<" ";
      PrintTree(root->lf);
      PrintTree(root->rg);
}
int main()
{
    BT*A=Newnode(1);
    A->lf=Newnode(2);
    A->rg=Newnode(3);
    A->lf->lf=Newnode(4);
    A->lf->rg=Newnode(5);
    A->rg->lf=Newnode(6);
    A->rg->rg=Newnode(7);
    PrintTree(A);
    cout<<endl;
  LevelhavMaxSum(A);
    return 0;
}
