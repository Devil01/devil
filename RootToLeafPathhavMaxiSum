#include<bits/stdc++.h>
#include<stdlib.h>
#include<cstdio>
#include<utility>
#include<vector>
#include<iostream>
#include<string.h>
#include<map>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define LL long long
#include<math.h>
//Iterative Preorder  traversal...

//NAVIN
//Here we go...
struct BT{
  int data;
  BT* lf;
  BT* rg;
};
struct BT*Newnode(int x)
{
    BT* temp=new BT();
    temp->data=x;
    temp->lf=NULL;
    temp->rg=NULL;
    return temp;
}
bool PrintPathHavMaxSum(BT*root,BT*Targetleaf)
{
    if(root==NULL)
        return false;
        if(root==Targetleaf||PrintPathHavMaxSum(root->lf,Targetleaf)||
            PrintPathHavMaxSum(root->rg,Targetleaf)){
           cout<<root->data<<" ";
            return true;
           }
        return false;
        
           
}
void getTargetleave(BT*root,BT**Targetleaf, int CurSum,int *MaxiSum)
{
    if(root==NULL)
        return;
    CurSum+=root->data;
    if(root->lf==NULL&&root->rg==NULL)
    {
        (*MaxiSum)=CurSum;
         *Targetleaf=root;
    }
    getTargetleave(root->lf,Targetleaf,CurSum,MaxiSum);
    getTargetleave(root->rg,Targetleaf,CurSum,MaxiSum);
}
void PathHavMaxSum(BT*root)
{
    if(root==NULL)
        return;
    BT*Targetleaf;
    int MaxiSum=0;
    getTargetleave(root,&Targetleaf,0,&MaxiSum);
    if( PrintPathHavMaxSum(root,Targetleaf));
       cout<<endl<<"The Sum is: "<<MaxiSum;
}
int main()
{
    BT*A=Newnode(1);
    A->lf=Newnode(2);
    A->rg=Newnode(3);
    A->lf->lf=Newnode(4);
    A->lf->rg=Newnode(5);
    A->rg->lf=Newnode(6);
    A->rg->rg=Newnode(7);
    PathHavMaxSum(A);
    return 0;
}
