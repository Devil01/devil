//Vertical sum in Given Binary Tree....
//NAVIN
//Here we go....
#include<bits/stdc++.h>
#include<stdlib.h>
#include<cstdio>
#include<utility>
#include<vector>
#include<iostream>
#include<string.h>
#include<map>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define LL long long
#include<math.h>
struct BT{
 int data;
 BT*lf;
 BT*rg;
 int HD;
};
BT*Newnode(int x)
{
    BT*temp=new BT();
    temp->data=x;
    temp->lf=NULL;
    temp->rg=NULL;
    temp->HD=0;
}
void SetHorizontalDistance(BT*root)
{
    if(root==NULL)
        return;
        
    if(root->lf!=NULL){ 
     root->lf->HD=root->HD-1;       
    SetHorizontalDistance(root->lf);
    }
    if(root->rg!=NULL){
        root->rg->HD=root->HD+1;
        SetHorizontalDistance(root->rg);
    }
}
void VerticalSum(BT*root)
{
    SetHorizontalDistance(root);
    if(root==NULL)
        return;
     map<int,int>mp;
    queue<BT*>q;
    q.push(root);
    while(!q.empty())
    {
        BT* temp=q.front();
        mp[temp->HD]+=temp->data;
        q.pop();
        if(temp->lf!=NULL)
            q.push(temp->lf);
        if(temp->rg!=NULL)
            q.push(temp->rg);
    }
    map<int,int>::iterator it;
    for(it=mp.begin();it!=mp.end();it++)
        cout<<(*it).second<<endl;
    
}
int main()
{
    BT* A=Newnode(1);
    A->lf=Newnode(2);
    A->rg=Newnode(3);
    A->lf->lf=Newnode(4);
    A->lf->rg=Newnode(5);
    A->rg->lf=Newnode(8);
    A->rg->rg=Newnode(9);
    A->lf->lf->lf=Newnode(6);
    A->lf->lf->rg=Newnode(7);
   VerticalSum(A);
   return 0;
}


